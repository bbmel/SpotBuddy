%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 0.59.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2358 503
%%HiResBoundingBox: 0 0 2358 503
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2358 503 re
W
q
[1 0 0 -1 0 503] cm
q
0 0 2358 502.72083 re
W*
q
[0.748096 0 0 0.748096 0 -502.72083] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
0 0 3152 1351 re
f
Q
Q
q
5.984772 0 2352.0151 501.97272 re
W*
q
[14.606023 0 0 14.614183 825.23663 14.479538] cm
5.58 24.280001 m
2.96 24.280001 0.66 23.02 0.42 20.120001 c
0.4 19.780001 0.6 19.6 0.92 19.6 c
3.12 19.6 l
3.42 19.6 3.58 19.76 3.64 20.08 c
3.8 20.799999 4.4 21.16 5.58 21.16 c
6.88 21.16 7.3 20.66 7.3 20.08 c
7.3 19.26 6.3 18.9 5.08 18.48 c
3.1 17.799999 0.6 16.98 0.6 13.92 c
0.6 11.12 2.88 9.72 5.26 9.72 c
7.599999 9.72 9.84 10.980001 10.08 13.88 c
10.1 14.22 9.9 14.4 9.58 14.4 c
7.38 14.4 l
7.08 14.4 6.92 14.24 6.86 13.92 c
6.7 13.18 6.18 12.84 5.26 12.84 c
4.26 12.84 3.8 13.34 3.8 13.92 c
3.8 14.76 4.62 15.16 5.78 15.58 c
7.78 16.280001 10.5 17 10.5 20.08 c
10.5 22.879999 8.26 24.279999 5.58 24.279999 c
5.58 24.280001 l
h
17.98 13.72 m
20.599998 13.72 22.759998 16.02 22.759998 19 c
22.759998 21.98 20.599998 24.280001 17.98 24.280001 c
16.6418 24.280001 15.668799 23.828402 15.000199 23.066 c
15.000199 27.5 l
15.000199 27.82 14.820199 28 14.500199 28 c
12.500199 28 l
12.1802 28 12.000199 27.82 12.000199 27.5 c
12.000199 14.5 l
12.000199 14.18 12.1802 14 12.500199 14 c
14.500199 14 l
14.820199 14 15.000199 14.18 15.000199 14.5 c
15.000199 14.934 l
15.668799 14.1716 16.6418 13.72 17.98 13.72 c
h
17.379999 21.440001 m
18.759998 21.440001 19.759998 20.5 19.759998 19 c
19.759998 17.5 18.759998 16.56 17.379997 16.56 c
15.999996 16.56 14.999997 17.5 14.999997 19 c
14.999997 20.5 15.999997 21.440001 17.379997 21.440001 c
17.379999 21.440001 l
h
29.26 24.280001 m
26.32 24.280001 23.959999 21.980001 23.959999 19 c
23.959999 16.019999 26.32 13.719999 29.259998 13.719999 c
32.199997 13.719999 34.559998 16.019999 34.559998 19 c
34.559998 21.980001 32.199997 24.280001 29.259998 24.280001 c
29.26 24.280001 l
h
29.26 21.360001 m
30.559999 21.360001 31.559999 20.42 31.559999 19 c
31.559999 17.58 30.559999 16.639999 29.26 16.639999 c
27.960001 16.639999 26.960001 17.58 26.960001 19 c
26.960001 20.42 27.960001 21.360001 29.26 21.360001 c
h
41.16 14 m
41.48 14 41.66 14.18 41.66 14.5 c
41.66 16.379999 l
41.66 16.699999 41.48 16.879999 41.16 16.879999 c
40.060001 16.879999 l
40.060001 23.5 l
40.060001 23.82 39.880001 24 39.560001 24 c
37.560001 24 l
37.240002 24 37.060001 23.82 37.060001 23.5 c
37.060001 16.880001 l
35.960003 16.880001 l
35.640003 16.880001 35.460003 16.700001 35.460003 16.380001 c
35.460003 14.500001 l
35.460003 14.180001 35.640003 14.000001 35.960003 14.000001 c
37.060001 14.000001 l
37.060001 11.300001 l
37.060001 10.980001 37.240002 10.800001 37.560001 10.800001 c
39.560001 10.800001 l
39.880001 10.800001 40.060001 10.980001 40.060001 11.300001 c
40.060001 14.000001 l
41.16 14.000001 l
41.16 14 l
h
52.845001 15.6094 m
54.255001 16.386799 55.1604 17.827801 55.1604 19.6 c
55.1604 22.120001 53.280399 24 50.740402 24 c
43.960403 24 l
43.660404 24 l
43.340405 24 43.160404 23.82 43.160404 23.5 c
43.160404 10.5 l
43.160404 10.18 43.340405 10 43.660404 10 c
46.360405 10 l
49.060406 10 l
51.520405 10 53.360405 11.64 53.360405 13.9 c
53.360405 14.5118 53.169216 15.103399 52.845005 15.6094 c
52.845001 15.6094 l
h
49.060001 13 m
46.360001 13 l
46.360001 15 l
49.760002 15 l
50.02 14.76 50.160004 14.42 50.160004 14.1 c
50.160004 13.440001 49.720005 13 49.060005 13 c
49.060001 13 l
h
50.34 20.9998 m
51.5 20.9998 51.959999 20.299799 51.959999 19.399799 c
51.959999 18.4998 51.5 17.799799 50.360001 17.799799 c
46.360001 17.799799 l
46.360001 20.9998 l
50.34 20.9998 l
h
64.800003 14 m
65.120003 14 65.300003 14.18 65.300003 14.5 c
65.300003 23.5 l
65.300003 23.82 65.120003 24 64.800003 24 c
62.800003 24 l
62.480003 24 62.300003 23.82 62.300003 23.5 c
62.300003 23.086599 l
61.830002 23.781599 60.978603 24.279999 59.700005 24.279999 c
57.840004 24.279999 56.500004 22.839998 56.500004 20.339998 c
56.500004 14.499998 l
56.500004 14.179998 56.680004 13.999998 57.000004 13.999998 c
59.000004 13.999998 l
59.320004 13.999998 59.500004 14.179998 59.500004 14.499998 c
59.500004 20.079998 l
59.500004 21.079998 60.080006 21.519999 60.840004 21.519999 c
61.740005 21.519999 62.300003 21.019999 62.300003 19.839998 c
62.300003 14.499998 l
62.300003 14.179998 62.480003 13.999998 62.800003 13.999998 c
64.800003 13.999998 l
64.800003 14 l
h
77.260002 10 m
77.580002 10 77.760002 10.18 77.760002 10.5 c
77.760002 23.5 l
77.760002 23.82 77.580002 24 77.260002 24 c
75.260002 24 l
74.940002 24 74.760002 23.82 74.760002 23.5 c
74.760002 23.066 l
74.0914 23.8284 73.118401 24.280001 71.780205 24.280001 c
69.160202 24.280001 67.000206 21.980001 67.000206 19 c
67.000206 16.019999 69.16021 13.719999 71.780205 13.719999 c
73.118408 13.719999 74.091408 14.171599 74.760002 14.933999 c
74.760002 10.499999 l
74.760002 10.179999 74.940002 9.999999 75.260002 9.999999 c
77.260002 9.999999 l
77.260002 10 l
h
72.379997 21.440001 m
73.759995 21.440001 74.759995 20.5 74.759995 19 c
74.759995 17.5 73.759995 16.56 72.379997 16.56 c
71 16.56 70 17.5 70 19 c
70 20.5 71 21.440001 72.379997 21.440001 c
h
89.720001 10 m
90.040001 10 90.220001 10.18 90.220001 10.5 c
90.220001 23.5 l
90.220001 23.82 90.040001 24 89.720001 24 c
87.720001 24 l
87.400002 24 87.220001 23.82 87.220001 23.5 c
87.220001 23.066 l
86.551399 23.8284 85.5784 24.280001 84.240204 24.280001 c
81.620201 24.280001 79.460205 21.980001 79.460205 19 c
79.460205 16.019999 81.620209 13.719999 84.240204 13.719999 c
85.578407 13.719999 86.551407 14.171599 87.220001 14.933999 c
87.220001 10.499999 l
87.220001 10.179999 87.400002 9.999999 87.720001 9.999999 c
89.720001 9.999999 l
89.720001 10 l
h
84.839996 21.440001 m
86.219994 21.440001 87.219994 20.5 87.219994 19 c
87.219994 17.5 86.219994 16.56 84.839996 16.56 c
83.459999 16.56 82.459999 17.5 82.459999 19 c
82.459999 20.5 83.459999 21.440001 84.839996 21.440001 c
h
98.199997 14.42 m
98.279999 14.14 98.479996 14 98.759995 14 c
100.919998 14 l
101.279999 14 101.459999 14.2 101.339996 14.56 c
97.019997 27.6 l
96.939995 27.880001 96.719994 28 96.439995 28 c
94.279991 28 l
93.919991 28 93.73999 27.799999 93.859993 27.440001 c
95.05999 23.84 l
91.539993 14.58 l
91.419991 14.24 91.579994 14 91.939995 14 c
94.099998 14 l
94.379997 14 94.559998 14.14 94.659996 14.4 c
96.559998 19.700001 l
98.199997 14.42 l
h
f
Q
q
[6.692015 0 0 6.695754 113.411301 -43.837513] cm
22.299999 51 m
25.099998 51 27.299999 48.799999 27.299999 46 c
27.299999 43.200001 25.099998 41 22.299999 41 c
19.5 41 17.299999 43.200001 17.299999 46 c
17.299999 48.700001 19.5 51 22.299999 51 c
h
22.299999 44 m
23.4 44 24.299999 44.900002 24.299999 46 c
24.299999 47.099998 23.4 48 22.299999 48 c
21.199999 48 20.299999 47.099998 20.299999 46 c
20.299999 44.900002 21.200001 44 22.299999 44 c
h
f
33.799999 41 m
31 41 28.799999 43.200001 28.799999 46 c
28.799999 48.799999 31 51 33.799999 51 c
36.599998 51 38.799999 48.799999 38.799999 46 c
38.799999 43.200001 36.5 41 33.799999 41 c
h
33.799999 48 m
32.700001 48 31.799999 47.099998 31.799999 46 c
31.799999 44.900002 32.700001 44 33.799999 44 c
34.899998 44 35.799999 44.900002 35.799999 46 c
35.799999 47.099998 34.900002 48 33.799999 48 c
h
f
35.700001 55.299999 m
33 57.899998 30.300001 59.099998 27.6 59 c
23.6 58.799999 20.900002 55.5 20.799999 55.5 c
20.299999 54.900002 19.299999 54.799999 18.699999 55.299999 c
18.099998 55.799999 17.999998 56.799999 18.499998 57.399998 c
18.599998 57.599998 22.099998 61.699997 27.399998 61.999996 c
27.599998 61.999996 27.899998 61.999996 28.099998 61.999996 c
31.399998 61.999996 34.699997 60.499996 37.799999 57.499996 c
38.399998 56.899998 38.399998 55.999996 37.799999 55.399998 c
37.299999 54.700001 36.299999 54.700001 35.700001 55.299999 c
h
f
67.699997 46 m
67.699989 46.55228 67.50473 47.023685 67.114204 47.414211 c
66.723679 47.804733 66.252281 47.999996 65.699997 48 c
65.147705 47.999996 64.6763 47.804733 64.285782 47.414211 c
63.895252 47.023685 63.699993 46.55228 63.699997 46 c
63.699993 45.447716 63.895252 44.976311 64.285782 44.585785 c
64.6763 44.195263 65.147705 44 65.699997 44 c
66.252281 44 66.723679 44.195263 67.114204 44.585785 c
67.50473 44.976311 67.699989 45.447716 67.699997 46 c
h
f
79.199997 46 m
79.199989 46.55228 79.00473 47.023685 78.614204 47.414211 c
78.223679 47.804733 77.752281 47.999996 77.199997 48 c
76.647705 47.999996 76.1763 47.804733 75.785774 47.414211 c
75.395248 47.023685 75.199989 46.55228 75.199997 46 c
75.199989 45.447716 75.395248 44.976311 75.785774 44.585785 c
76.1763 44.195263 76.647705 44 77.199997 44 c
77.752281 44 78.223679 44.195263 78.614204 44.585785 c
79.00473 44.976311 79.199989 45.447716 79.199997 46 c
h
f
72 27.200001 m
61.700001 27.200001 53 33.900002 50.099998 43.200001 c
47.099998 33.599998 38.199997 26.700001 27.599998 26.700001 c
14.599999 26.700001 4.099999 37.300003 4.099999 50.200001 c
4.099999 63.200001 14.699999 73.699997 27.599998 73.699997 c
38.099998 73.699997 47.099998 66.699997 50.099998 57.199997 c
53.099998 66.5 61.799999 73.199997 72 73.199997 c
84.699997 73.199997 95 62.899998 95 50.199997 c
95 37.499996 84.699997 27.200001 72 27.200001 c
h
27.6 67.699997 m
17.900002 67.699997 10.1 59.799995 10.1 50.199997 c
10.1 40.499996 18 32.699997 27.6 32.699997 c
37.200001 32.699997 45.099998 40.599998 45.099998 50.199997 c
45.099998 59.900002 37.299999 67.699997 27.6 67.699997 c
h
65.699997 41 m
68.5 41 70.699997 43.200001 70.699997 46 c
70.699997 48.799999 68.5 51 65.699997 51 c
62.899994 51 60.699997 48.799999 60.699997 46 c
60.599998 43.200001 62.900002 41 65.699997 41 c
h
81.199997 57.400002 m
78.099998 60.400002 74.799995 61.900002 71.5 61.900002 c
71.300003 61.900002 71.099998 61.900002 70.800003 61.900002 c
65.5 61.600002 62.100002 57.5 61.900002 57.300003 c
61.400002 56.700005 61.5 55.700005 62.100002 55.200005 c
62.700001 54.700005 63.700001 54.800003 64.200005 55.400005 c
64.200005 55.400005 67.000008 58.700005 71.000008 58.900005 c
73.700005 59.100006 76.400009 57.800007 79.100006 55.200005 c
79.700005 54.600006 80.600006 54.600006 81.200005 55.200005 c
81.800003 55.900002 81.800003 56.900002 81.199997 57.400002 c
h
77.199997 51 m
74.399994 51 72.199997 48.799999 72.199997 46 c
72.199997 43.200001 74.399994 41 77.199997 41 c
80 41 82.199997 43.200001 82.199997 46 c
82.199997 48.700001 79.900002 51 77.199997 51 c
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
